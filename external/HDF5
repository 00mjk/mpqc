# -*- mode: cmake -*-

set(EXTERNAL_SOURCE_DIR ${PROJECT_SOURCE_DIR}/external)
set(EXTERNAL_BUILD_DIR ${PROJECT_BINARY_DIR}/external/build)

include(ExternalProject)

find_package(HDF5 QUIET)

if (HDF5_FOUND)

  # if HDF5 is found, ensure that it's threadsafe before declaring victory
  file(WRITE conftest.cxx "
    #include <hdf5.h>
    #ifndef H5_HAVE_THREADSAFE
    #error "HDF5 NOT THREADSAFE"
    #endif
    int main(int argc, char** argv) { return 0; }
  ")
  try_compile(RES1 ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/conftest.cxx
              CMAKE_FLAGS LINK_LIBRARIES "-DLINK_LIBRARIES:STRING=${HDF5_LIBRARIES_RELEASE}"
              CMAKE_FLAGS COMPILE_DEFINITIONS "-I${HDF5_INCLUDE_DIRS}"
              OUTPUT_VARIABLE LOG1)
  if (NOT RES1)
    message(WARNING "Found HDF5 (${HDF5_LIBRARIES_RELEASE}) but not thread-safe, will compile ourselves")
    set(HDF5_FOUND FALSE)
  else()
    include_directories(${HDF5_INCLUDE_DIRS})
    set(HDF5_LIBRARIES "${HDF5_LIBRARIES_RELEASE}")
  endif()

endif()

if (NOT HDF5_FOUND)

  set(HDF5_URL http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8.10-patch1/src/hdf5-1.8.10-patch1.tar.gz)
  set(HDF5_URL_HASH MD5=2147a289fb33c887464ad2b6c5a8ae4c)

  if (EXISTS ${EXTERNAL_SOURCE_DIR}/hdf5.tar.gz)
    set(HDF5_URL ${EXTERNAL_SOURCE_DIR}/hdf5.tar.gz)
    set(HDF5_URL_HASH "")
    message(STATUS "Using HDF5 archive ${HDF5_URL}")
  endif()

  ExternalProject_Add(
    hdf5
    PREFIX ${EXTERNAL_BUILD_DIR}/hdf5
    URL ${HDF5_URL}
    URL_HASH ${HDF5_URL_HASH}
    BUILD_IN_SOURCE 1
    CONFIGURE_COMMAND ./configure
      --prefix=${EXTERNAL_BUILD_DIR}/hdf5
      --enable-threadsafe
      --with-pthread
      CC=${CMAKE_C_COMPILER} CPPFLAGS=-D_GNU_SOURCE
    BUILD_COMMAND make
    INSTALL_COMMAND make install
  )

  add_dependencies(External hdf5)
  include_directories(${EXTERNAL_BUILD_DIR}/hdf5/include)
  set(HDF5_LIBRARIES ${EXTERNAL_BUILD_DIR}/hdf5/lib/libhdf5.a)

endif()

# HDF5 libs
if (HDF5_LIBRARIES)
  set(HAVE_HDF5 TRUE)
  find_library(LIBZ NAMES z)
  if (LIBZ)
    list(APPEND HDF5_LIBRARIES ${LIBZ})
  endif()
  find_library(LIBSZ NAMES sz)
  if (LIBSZ)
    list(APPEND HDF5_LIBRARIES ${LIBSZ})
  endif()
  message(STATUS "HDF5 libraries: ${HDF5_LIBRARIES}")
endif()