# -*- mode: cmake -*-

set(LIBINT "" CACHE STRING "Libint on/off/prefix")
set_property(CACHE LIBINT PROPERTY STRINGS "" "on" "off") 

# default libint action
if ("${LIBINT}" STREQUAL "")
  set(LIBINT "optional")
endif()

if (LIBINT)

  if ("${LIBINT}" OR "${LIBINT}" STREQUAL "optional")
    find_library(LIBINT2_LIBRARY int2)
    find_path(LIBINT2_INCLUDE_DIR libint2/libint2.h)
  else()
    find_library(LIBINT2_LIBRARY int2
                 PATHS ${LIBINT}/lib NO_DEFAULT_PATH)
    find_path(LIBINT2_INCLUDE_DIR libint2/libint2.h
              PATHS ${LIBINT}/include NO_DEFAULT_PATH)
    if (NOT LIBINT2_LIBRARY)
      message(FATAL_ERROR "Could not find libint library in ${LIBINT}")
    endif()
  endif()

  if (LIBINT2_LIBRARY)
  
    if (NOT LIBINT2_INCLUDE_DIR)
      message(FATAL_ERROR "Could not find libint2/libint2.h")
    endif()

    list(APPEND CMAKE_REQUIRED_INCLUDES ${LIBINT2_INCLUDE_DIR})
    list(APPEND CMAKE_REQUIRED_INCLUDES ${LIBINT2_INCLUDE_DIR}/libint2)
    list(APPEND CMAKE_REQUIRED_LIBRARIES ${LIBINT2_LIBRARY})

    # sanity check: try compiling a simple program
    CHECK_CXX_SOURCE_COMPILES(
      "
      #include <libint2/libint2.h>
      int main(int argc, char** argv) {
        libint2_static_init();
        return 0;
      }
      "  LIBINT_COMPILES)
    if (NOT LIBINT_COMPILES)
      message(FATAL_ERROR "Could not compile LIBINT test program.\nSee CMakeFiles/CMakeOutput.log for details")
    endif()
    
    # make sure libint2 version is up to date
    CHECK_CXX_SOURCE_COMPILES(
      "
          #include <libint2/libint2.h>
          #include <libint2/boys.h>
          #if !(LIBINT_MAJOR_VERSION==2 && LIBINT_MINOR_VERSION==0 && LIBINT_MICRO_VERSION>=5)
          # error \"Libint2 library is too old\"
          #endif
          int main(int argc, char** argv) { return 0; }
      "  LIBINT_IS_UP_TO_DATE)    
    if (NOT LIBINT_IS_UP_TO_DATE)
      message(FATAL_ERROR "Libint library is too old: version 2.0.5 or later is required")
    endif()
    
    # check that libint2 uses one of orderings supported by MPQC
    CHECK_CXX_SOURCE_COMPILES(
      "
        #include <libint2/libint2.h>
        #if LIBINT2_CGSHELL_ORDERING != LIBINT2_CGSHELL_ORDERING_STANDARD && LIBINT2_CGSHELL_ORDERING != LIBINT2_CGSHELL_ORDERING_INTV3 && LIBINT2_CGSHELL_ORDERING != LIBINT2_CGSHELL_ORDERING_GAMESS
        # error \"Libint2 library is uses an Cartesian Gaussian ordering not supported by MPQC, or it is simply too old\"
        #endif
        int main(int argc, char** argv) { return 0; }
      "  LIBINT_USES_SUPPORTED_CARTGAUSS_ORDERING)    
    if (NOT LIBINT_USES_SUPPORTED_CARTGAUSS_ORDERING)
      message(FATAL_ERROR "Libint2 library is uses an Cartesian Gaussian ordering not supported by MPQC, or it's simply too old")
    endif()
    
    set(LIBINT2_FOUND TRUE)

    # check if libint2 supports [g12,T] commutator integrals
    CHECK_CXX_SOURCE_COMPILES(
      "
        #include <libint2/libint2.h>
        #if LIBINT2_SUPPORT_G12 && LIBINT2_SUPPORT_T1G12
          void libint2_support_t1g12() {}
        #endif
        int main(int argc, char** argv) { libint2_support_t1g12(); return 0; }
      "  LIBINT_SUPPORTS_G12_T1G12_INTEGRALS
    )
    
    message(STATUS "Found Libint2:")
    message(STATUS "\tLIBINT2_LIBRARY=${LIBINT2_LIBRARY}")
    message(STATUS "\tLIBINT2_INCLUDE_DIR=${LIBINT2_INCLUDE_DIR}")
    set(HAVE_LIBINT2 TRUE)
  endif()

endif()

if ("${LIBINT}" AND NOT LIBINT2_FOUND)

  if (MPQC_EXPERT)

    message("** Downloading and building Libint2 is explicitly disabled in EXPERT mode")

  else()

    set(EXTERNAL_SOURCE_DIR ${PROJECT_SOURCE_DIR}/external)
    set(EXTERNAL_BUILD_DIR ${PROJECT_BINARY_DIR}/external/build)

    include(ExternalProject)

    set(LIBINT_URL ${EXTERNAL_SOURCE_DIR}/libint-2.0.5-stable.tgz)
    set(LIBINT_URL_HASH MD5=c8a93d55384ecb2eced2b698281bd7b5)
    if (NOT EXISTS ${LIBINT_URL})
      message(FATAL_ERROR "Did not find embedded copy of Libint2, something wrong with your source tree")
    endif (NOT EXISTS ${LIBINT_URL})

    message("** Will build Libint from ${LIBINT_URL}")

    if (BUILD_SHARED_LIBS)
      set(LIBINT_BUILD_TYPE --enable-shared --disable-static)
      set(LIBINT_LIBRARY_SUFFIX ${CMAKE_SHARED_LIBRARY_SUFFIX})
    else (BUILD_SHARED_LIBS)
      set(LIBINT_BUILD_TYPE --disable-shared --enable-static)
      set(LIBINT_LIBRARY_SUFFIX ${CMAKE_STATIC_LIBRARY_SUFFIX})
    endif (BUILD_SHARED_LIBS)
    ExternalProject_Add(
      libint
      PREFIX ${EXTERNAL_BUILD_DIR}/libint
      URL ${LIBINT_URL}
      URL_HASH ${LIBINT_URL_HASH}
      BUILD_IN_SOURCE 1
      CONFIGURE_COMMAND /bin/bash ./configure
      --prefix=${EXTERNAL_BUILD_DIR}/libint
      "${LIBINT_BUILD_TYPE}"
      CC=${CMAKE_C_COMPILER}
      "CFLAGS=${CMAKE_C_FLAGS}"
      CXX=${CMAKE_CXX_COMPILER}
      "CXXFLAGS=${CMAKE_CXX_FLAGS}"
      BUILD_COMMAND make SHELL=/bin/bash
      INSTALL_COMMAND make install SHELL=/bin/bash
      )

    add_dependencies(External libint)
    set(LIBINT2_LIBRARY ${EXTERNAL_BUILD_DIR}/libint/lib/libint2${LIBINT_LIBRARY_SUFFIX})
    set(LIBINT2_INCLUDE_DIR ${EXTERNAL_BUILD_DIR}/libint/include)
    set(HAVE_LIBINT2 TRUE)

  endif()

endif()

if (HAVE_LIBINT2)
  include_directories(${LIBINT2_INCLUDE_DIR})
  include_directories(${LIBINT2_INCLUDE_DIR}/libint2)
else()
  message("** Libint2 was not found")
  set(LIBINT2_LIBRARY "")
endif()

