
/** \page develop Using MPQC to Develop New Features

There are three modes in which MPQC can be used in developing software implementation
of existing and new methods:
  - __native__: you develop within the MPQC source tree directly;
  - __plug-in__: you plug your code into MPQC to extend its functionality, e.g. by adding new classes to MPQC;
  - __plug-out__: you plug MPQC libraries into your project, e.g. by using MPQC classes and functions
  in your code.

These methods are demonstrated and discussed below.
- \ref develop-within-mpqc
  - \ref devcheck
- \ref extend-mpqc
  - \ref devsampmp2
- \ref develop-outside-mpqc
  - \ref mpqcinit


\section develop-within-mpqc Developing code within MPQC

This approach is useful when you want to extend and replace existing classes in MPQC,
e.g. you want to add a new Wavefunction class that implements a new
or existing electronic structure method.

The pros of this approach are:
  - the user can take advantage of the MPQC infrastructure, e.g. the build system and
    test harness;
  - this approach makes it possible to eventually incorporate the new code into the
    MPQC master source repository for release
    and maintenance by the MPQC team.

The recommended approach is to fork the MPQC source repo on Github (you can
make a private fork, if you want) and develop the new code within that fork.
An exception to this is if you are a member of the MPQC team: then
you will want to develop your code on a branch within the main
repo, as this allows you to take advantage of the Continuous Integration system.
Since, unlike forks, branches cannot be private; therefore use the fork mechanism
is you must keep the code private.

You will want to periodically (i.e., often) sync with the changes in the main repo by merging in
changes via the pull request mechanism or by direct git merge. When you are ready
to marge your changes into the main repo create a pull request for code review and
incorporation.

\subsection devcheck Adding Test Cases to the Verification Suite

Note to be added.

\section extend-mpqc Extending MPQC functionality

It is also possible to extend the functionality of the MPQC executable
by adding new classes. The *plug-in* style approach
allows you to keep your source separate from the rest of the MPQC.

To use this approach it is necessary to compile MPQC libraries
and install them to the location specifies by the \c CMAKE_INSTALL_PREFIX CMake variable.
It is recommended that the MPQC is validated before installation.

\subsection devsampmp2 MP2 Implementation Example

To illustrate how to use the plug-in approach let's consider
a simple example in which we extend the MPQC executable with
a new implementation of MP2 energy. Although MPQC has several
implementations of MP2 already, they all assume canonical orbitals,
and whereas our new formulation will not make this assumption
by solving the MP1 amplitude equations iteratively.

\subsubsection devsampmp2src MP2 Implementation Example: Source

This example code illustrates a complete MP2 energy
implementation using the MPQC Toolkit. The source file can be found at
`doc/devsamp/mp2/mp2.cpp` in the MPQC source directory.
Note that the source file does not contain the `main()` function.
Instead the MP2 class defined here will be linked into the MPQC executable
and will become usable just like any other existing Wavefunction class in MPQC:
you will be able to use it to compute gradients by finite differences, etc.

To compile the new class and link into the MPQC executable
see the \ref devsampmp2mak section.

\include mp2/mp2.cpp

\subsubsection devsampmp2mak MP2 Implementation Example: CMakeLists.txt

Although it is possible to build our example manually, or use Make, it is recommended
to use CMake. This is because KitWare's CMake tool is used to configure, build, and
install MPQC itself. Installing MPQC will export key information about the MPQC libraries
and other prerequisites (e.g., TiledArray and MADWorld runtime)
that is necessary to compile the code against them
(e.g., the interlibrary dependencies, the compiler and linker flags, etc.).
This exported info then makes it incredibly easy to use CMake to build our example
in a few lines of CMake code. This file, located at
`doc/devsamp/mp2/CMakeLists.txt` in the MPQC build directory, was generated from the
`doc/devsamp/mp2/CMakeLists.txt.in` template located in the MPQC source directory.

The CMakeLists.txt file how to compile the \c mp2.cpp source and use it to create
the \c mp2 executable by linking against MPQC libraries. Note that
the MPQC library names do not appear explicitly: instead we use their CMake target
\c MPQCmain .

\include mp2/CMakeLists.txt

\subsection devsampmp2inp MP2 Implementation Example: Input

This input JSON file can be used with the program illustrated in
the \ref devsampmp2src section.

\include mp2/mp2.json

\section develop-outside-mpqc Using MPQC as an external library in a separate project

To use MPQC from a standalone project it is necessary to compile MPQC libraries
and install them to the location specifies by the \c CMAKE_INSTALL_PREFIX CMake variable.
It is recommended that the MPQC is validated before installation.

To use the MPQC code your program must do the following before using any nontrivial MPQC functionality:
  - initialize the MADWorld parallel runtime, by calling \c %madness::initialize() ; this will
    initialize the MPI runtime by calling MPI_Init_thread ;
  - initialize the MPQC package and the dependent components (e.g., the Libint2 Gaussian integral library)
    by calling ::mpqc::initialize();

After the MPQC functionality is no longer needed, you can release resources by calling ::mpqc::finalize() .
This is not necessary if you are about to exit the program: the MPQC resources are released automatically
when the program exits. Note that it is possible to call ::mpqc::initialize() again after calling
::mpqc::finalize().

After the MADWorld runtime is no longer needed, it is recommended to call \c %madness::finalize() .
You should not call \c %madness::initialize() again after calling \c %madness::finalize()
because the MPI Standard does not specify whether
the MPI libraries must support more than one initialize/finalize cycle.

\subsection mpqcinit Initializing MPQC

notes to be added, for now see src/bin/mpqc/mpqc.cpp

*/
