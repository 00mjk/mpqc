
/** \page mpqcrunning Running MPQC

This chapter explains how to run MPQC in a variety of environments.

The first sections gives general information on running MPQC:

<ul>
  <li> \ref mpqccomline
</ul>

The final sections give specific information on running MPQC in
different environments, as well as optimization hints:

<ul>
  <li> \ref mpqcmpi
  <li> \ref mpqcopthints
</ul>

\section mpqccomline Command Line Options

  MPQC executable can be given the following command-line options:

| option          | accept value?| description                                           |
|-----------------|--------------|-------------------------------------------------------|
| <tt>-i</tt>     | mandatory    | The name of the input file. MPQC will attempt to parse the given input file using the JSON, XML, and INFO formats (in that order). If <tt>-i</tt> is not given, and no options with omitted optional values are used (e.g., <tt>-D</tt>), the last command-line argument that does not specify an option will be assumed to give the input file name.|
| <tt>-o</tt>     | mandatory    | The name of the output file.  The default is to send output to the console. |
| <tt>-p</tt>     | mandatory    | The prefix for all relative file paths in the input file               |
| <tt>-W</tt>     | mandatory    | the working directory in which to compute             |
| <tt>-D</tt>     | optional     | unless "debugger" keyword is given in input KeyVal, create a debugger at start, with the optional argument as its JSON KeyVal input |
| <tt>-v</tt>     | no           | print the version number and exit                     |
| <tt>-w</tt>     | no           | print the warranty and exit                           |
| <tt>-L</tt>     | no           | print the license and exit                            |
| <tt>-k</tt>     | no           | print all registered (KeyVal-constructible) DescribedClass classes |
| <tt>-h</tt>     | no           | print the usage info and exit                         |
| <tt>-d</tt>     | no           | start the program and attach a debugger               |
| <tt>-t</tt>     | no           | throw if a deprecated keyword is read                 |

\subsection mpqccomlineexamples MPQC Usage Examples

<ol>
  <li> prints the usage info:
  \code{.sh}
  mpqc -h
  \endcode
  <li> run MPQC using `input.json` as the input file:
  \code{.sh}
    mpqc input.json
  \endcode
  <li> same as 2, but launches GDB upon failure:
  \code{.sh}
    mpqc -D '{"cmd": "gdb_xterm"}' input.json
  \endcode
  <li> same as 3, but __broken__ since <tt>-D</tt> "consumes" <tt>input.json</tt> as its argument:
  \code{.sh}
    mpqc -D input.json
  \endcode
  <li> fixed version of 4, <tt>input.json</tt> is passed via <tt>-i</tt>:
  \code{.sh}
    mpqc -D -i input.json
  \endcode
  <li> same as 2, but launches LLDB at the start:
  \code{.sh}
    mpqc -d -D '{"cmd": "lldb_xterm"}' input.json
  \endcode
  <li> same as 6, but redirects output to <tt>output.log</tt>':
  \code{.sh}
    mpqc -d -D '{"cmd": "lldb_xterm"}' -o output.log input.json
  \endcode
</ol>

\section mpqcenv MPQC Environment Variables
- <tt>MPQC_WORK_DIR</tt>: the directory for POSIX I/O of large text/binary files; it needs to be valid in every MPI process; the default on each process is the current working directory of that MPI process

\section mpqcmpi Running on a Distributed Memory Multiprocessor with MPI

Whwreas
MPQC requires a high-performance MPI implementation that supports <tt>MPI_THREAD_MULTIPLE</tt>
operation. Modern MPI implementations expose a huge number of parameters
that can be controlled by user via environment variables or other means.
Correct execution of MPQC with most MPI implementations usually does not require changing
any parameters; the few exceptions are listed below.

\subsection mpqcmpimvapich2 MVAPICH2

Environment variables \c MV2_ENABLE_AFFINITY and \c MV2_USE_LAZY_MEM_UNREGISTER must
be both set to zero, e.g.:
```
  export MV2_ENABLE_AFFINITY=0
  export MV2_USE_LAZY_MEM_UNREGISTER=0
```

\section mpqcopthints MPQC Optimization Hints

MPQC was designed to execute correctly and efficiently on a typical platform without too much user intervention.
To achieve optimal performance, however, manual tuning is necessary.

\subsection mpqcopthintsthr Number of MADWorld Threads

The total number of MADWorld threads by default is set to the number of available cores (this may be affected by whether
hyperthreading is enabled or not). Of these one thread will always be used for messaging (note that this is distinct from MPI
threads; modern MPI implementations will typically use one or more threads for their own messaging operations) and the
rest will be used for computation. Environment variable <tt>MAD_NUM_THREADS</tt> can be used to control
the total number of threads used by MADWorld. It is recommended to set it to the number of hardware threads that
each MPI rank can access without contention (e.g. the number of
cores in each physical node).

N.B. The actual number of threads created by MADWorld may be greater than the value given by <tt>MAD_NUM_THREADS</tt>,
however the total number of active threads will exceed its value. This also assumes that user tasks are single-threaded
(i.e. do not spin their own threads).

\subsection mpqcopthintsbuf Communication Buffers

It is recommended to increase the number and size of communication buffers used by the
active messaging system of MADWorld runtime. The following environment variables
can be used to control the active messaging:

| Environment Variable          | Description                                                                          |
|-------------------------------|--------------------------------------------------------------------------------------|
| <tt>MAD_SEND_BUFFERS</tt>     | The number of buffers that track pending outgoing messages. The default value depends on the platform; <tt>MAD_SEND_BUFFERS=128</tt> by default for Linux and MacOS.       |
| <tt>MAD_RECV_BUFFERS</tt>     | The number of preallocated buffers for receiving incoming messages <i>eagerly</i>. The default value is <tt>MAD_RECV_BUFFERS=128</tt>.                                  |
| <tt>MAD_BUFFER_SIZE</tt>      | The size of each preallocated buffer for receiving incoming messages eagerly. The default is <tt>MAD_RECV_BUFFERS=1.5MB</tt>.                                      |

The most important factor for performance is the receive buffer size: TA Arrays' tiles must fit into these buffers to ensure
best performance. For data that exceeds the eager buffer size a rendevous protocol will be used which will increases messaging latency
and thus will can significantly impact message processing and overall performance.

\subsection mpqcopthintsmpi MPI Ranks per node

Although in an ideal scenario one MPI rank per node is optimal for intra-node communication efficiency, in practice
better performance may be obtained by using more than 1 MPI rank per node. Two factor play into this:
(1) communication thread performance and (2) NUMA regions. The former determines whether single communication thread
can process incoming messages at a rate sufficient to keep compute threads busy. On massively multicore machines
such as Intel Xeon Phi one communication thread is not sufficient, so it is better to use more 1 MPI rank per node (this is
only applicable if using more than 1 node).
NUMA regions also factor into this. Since MADWorld and TiledArray do not assume any structure about the memory accessed
by a single MPI rank, to improve memory locality in presence of NUMA regions it is recommended to create 1 MPI rank
per NUMA region (e.g. 1 per socket in a multisocket CPU node, or 1 per NUMA region on Xeon Phi),
and bind that rank's threads to its region. See your MPI implementation documentation for how to
bind threads to NUMA regions.

\subsection mpqcopthintsblaslapack BLAS/LAPACK Library

It is recommended to use sequential BLAS/LAPACK library interfaces. N.B. It should be possible to use multithreaded
versions of MKL that use Intell Thread Building Blocks (TBB) correctly assuming that MADWorld also uses TBB.

*/
