
/** \page mpqcrunning Running MPQC

This chapter explains how to run MPQC in a variety of environments.

The first two sections give general information on running MPQC:

<ul>
  <li> \ref mpqccomline
  <li> \ref mpqcenv
</ul>

The final sections give specific information on running MPQC in
different environments, as well as optimization hints:

<ul>
  <li> \ref mpqcmpi
  <li> \ref mpqcopthints
</ul>

\section mpqccomline Command Line Options

  MPQC executable can be given the following command-line options:

| option          | accept value?| description                                           |
|-----------------|--------------|-------------------------------------------------------|
| <tt>-i</tt>     | mandatory    | The name of the input file. MPQC will attempt to parse the given input file using the JSON, XML, and INFO formats (in that order). If <tt>-i</tt> is not given, and no options with omitted optional values are used (e.g., <tt>-D</tt>), the last command-line argument that does not specify an option will be assumed to give the input file name.|
| <tt>-o</tt>     | mandatory    | The name of the output file.  The default is to send output to the console. |
| <tt>-p</tt>     | mandatory    | The prefix for all relative file paths in the input file               |
| <tt>-W</tt>     | mandatory    | the working directory in which to compute             |
| <tt>-D</tt>     | optional     | unless "debugger" keyword is given in input KeyVal, create a debugger at start, with the optional argument as its JSON KeyVal input |
| <tt>-v</tt>     | no           | print the version number and exit                     |
| <tt>-w</tt>     | no           | print the warranty and exit                           |
| <tt>-L</tt>     | no           | print the license and exit                            |
| <tt>-h</tt>     | no           | print the usage info and exit                         |
| <tt>-d</tt>     | no           | start the program and attach a debugger               |

\subsection mpqccomlineexamples MPQC Usage Examples

<ol>
  <li> prints the usage info:
  \code{.sh}
  mpqc -h
  \endcode
  <li> run MPQC using `input.json` as the input file:
  \code{.sh}
    mpqc input.json
  \endcode
  <li> same as 2, but launches GDB upon failure:
  \code{.sh}
    mpqc -D '{"cmd": "gdb_xterm"}' input.json
  \endcode
  <li> same as 3, but __broken__ since <tt>-D</tt> "consumes" <tt>input.json</tt> as its argument:
  \code{.sh}
    mpqc -D input.json
  \endcode
  <li> fixed version of 4, <tt>input.json</tt> is passed via <tt>-i</tt>:
  \code{.sh}
    mpqc -D -i input.json
  \endcode
  <li> same as 2, but launches LLDB at the start:
  \code{.sh}
    mpqc -d -D '{"cmd": "lldb_xterm"}' input.json
  \endcode
  <li> same as 6, but redirects output to <tt>output.log</tt>':
  \code{.sh}
    mpqc -d -D '{"cmd": "lldb_xterm"}' -o output.log input.json
  \endcode
</ol>

\section mpqcenv Environmental Variables

MPQC looks at several environmental variables that control the behavior
of the component libraries and runtimes:

<dl>

  <dt><tt>MAD_NUM_THREADS</tt><dd>The maximum number of threads that can execute
                     work tasks simultaneously. Set this to the number of cores that
                     each MPI process can access without contention (e.g. the number of
                     cores in each physical node). The actual number of threads
                     created may be greater than that.

</dl>

\section mpqcmpi Running on a Distributed Memory Multiprocessor with MPI

Modern MPI implementations expose a huge number of parameters
that can be controlled by user via environment variables or other means.
Correct execution of MPQC with most MPI implementations usually does not require changing
any parameters; the few exceptions are listed below.

\subsection mpqcmpimvapich2 MVAPICH2

Environment variables \c MV2_ENABLE_AFFINITY and \c MV2_USE_LAZY_MEM_UNREGISTER must
be both set to zero, e.g.:
```
  export MV2_ENABLE_AFFINITY=0
  export MV2_USE_LAZY_MEM_UNREGISTER=0
```


\section mpqcopthints MPQC Optimization Hints

MPQC was designed to execute as efficiently as possible without too much user intervention.
However, it is sometimes necessary to adjust the default values of parameters.

\subsection mpqcopthintsbuf Communication Buffers

It is recommended to increase the number and size of communication buffers used by the
MADWorld runtime:

```
export MAD_SEND_BUFFERS=128
export MAD_RECV_BUFFERS=128
export MAD_BUFFER_SIZE=1.5MB
```

*/
