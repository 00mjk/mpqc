#ifndef SRC_MPQC_MPQCCONFIG_H
#define SRC_MPQC_MPQCCONFIG_H

/* The host architecture. */
#cmakedefine HOST_ARCH

/* The target architecture. */
#cmakedefine TARGET_ARCH "@TARGET_ARCH@"

/* The version number. */
#define MPQC_VERSION "@MPQC_VERSION@"

/* The major version number. */
#define MPQC_MAJOR_VERSION @MPQC_MAJOR_VERSION@

/* The minor version number. */
#define MPQC_MINOR_VERSION @MPQC_MINOR_VERSION@

/* The micro version number. */
#define MPQC_MICRO_VERSION @MPQC_MICRO_VERSION@

/* The buildid. */
#define MPQC_BUILDID "@MPQC_BUILDID@"

/* The library directory in the src distribution. */
#define SRC_MPQC_DATA_PATH "@SRC_MPQC_DATA_PATH@"

/* The installed location of the library directory. */
#define INSTALLED_MPQC_DATA_PATH "@INSTALLED_MPQC_DATA_PATH@"

/* The location of architecture independent files. */
#define MPQCDATAPATH "@MPQCDATAPATH@"

/* ----------------------------------------------------- */

/* Define if you have <libunwind.h> and unw_init_local.  */
#cmakedefine HAVE_LIBUNWIND

/* Define if you have <execinfo.h> backtrace and backtrace_symbol.  */
#cmakedefine HAVE_BACKTRACE

/* Define if you have abi::__cxa_demangle.  */
#cmakedefine HAVE_CXA_DEMANGLE

/* Define if you have the signal function.  */
#cmakedefine HAVE_SIGNAL

/* Define if you have the system function.  */
#cmakedefine HAVE_SYSTEM

/* Define if you have the posix_spawn function.  */
#cmakedefine HAVE_POSIX_SPAWN

/* ----------------------------------------------------- */

/* The default memory allocation, in bytes. */
#cmakedefine DEFAULT_MPQC_MEMORY @DEFAULT_MPQC_MEMORY@
#ifndef DEFAULT_MPQC_MEMORY
#define DEFAULT_MPQC_MEMORY 536870912
#endif

////////////////////////////////////////////////////////////////////////////////
// User-configurable macros that control program behavior
////////////////////////////////////////////////////////////////////////////////

/* how to check memory allocation/deallocation;
   turn on if need memory management checking, and valgring is not available or not affordable.

   0 - no profiling or tracing
   1 - profile memory use (keep statistics, but without tracing pointers), at slight runtime and memory overhead
   2 - trace memory use, with the level of detail depending on the pool; the default is to use backtrace
       (if available) to detect the location of memory operations (note the potential for great
       performance impact, especially on memory use)
   -1 - pick the default: ifdef NDEBUG ? 0 : 1
*/
#define MPQC_MEMORY_CHECK @MPQC_MEMORY_CHECK@
#if MPQC_MEMORY_CHECK == -1
# undef MPQC_MEMORY_CHECK
# ifdef NDEBUG
#  define MPQC_MEMORY_CHECK 0
# else
#  define MPQC_MEMORY_CHECK 1
# endif
#endif

/* Controls behavior of MPQC assertions.

   0 - assertions disabled
   1 - assert()
   2 - throw std::exception()
   -1 - pick the default: ifdef NDEBUG ? 0 : 2
 */
#define MPQC_ASSERT_MODE @MPQC_ASSERT_MODE@
#if MPQC_ASSERT_MODE == -1
# undef MPQC_ASSERT_MODE
# ifdef NDEBUG
#  define MPQC_ASSERT_MODE 0
# else
#  define MPQC_ASSERT_MODE 2
# endif
#endif

#endif  // SRC_MPQC_MPQCCONFIG_H
