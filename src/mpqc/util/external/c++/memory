#ifndef SRC_MPQC_UTIL_EXTERNAL_CPP_MEMORY
#define SRC_MPQC_UTIL_EXTERNAL_CPP_MEMORY

#include <memory>

// C++14 only
#if __cplusplus < 201402L

namespace std {

namespace detail {
template <class T>
struct make_unique_switch {
  typedef std::unique_ptr<T> single_object_ptr;
};
template <class T>
struct make_unique_switch<T[]> {
  typedef unique_ptr<T[]> array_ptr;
};
template <class T, size_t N>
struct make_unique_switch<T[N]> {
  typedef void static_array_ptr;
};

}  // namespace detail

template <class T, class... Args>
typename detail::make_unique_switch<T>::single_object_ptr make_unique(Args &&... args) {
  return unique_ptr<T>(new T(std::forward<Args>(args)...));
}

template <class T>
typename detail::make_unique_switch<T>::array_ptr make_unique(size_t n) {
  typedef typename remove_extent<T>::type U;
  return unique_ptr<T>(new U[n]());
}

template <class T, class... Args>
typename detail::make_unique_switch<T>::static_array_ptr make_unique(Args &&...) = delete;

}  // namespace std

#endif  // __cplusplus < 201402L

#endif  // SRC_MPQC_UTIL_EXTERNAL_CPP_MEMORY
