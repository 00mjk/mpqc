
/** \page compile Compiling

These instructions are for a machine running Unix or a Unix-like
system. The codes work under recent versions of Linux, AIX, and IRIX at
least.  The vendor's compiler for each of these systems should work.

\section compilepre Prerequisites

Make sure that you have the following programs available. Most can be found
at any GNU software FTP repository.

<ul>

    <li> Compilers for the C, C++, and FORTRAN languages are needed.  The
         FORTRAN compiler is used to determine the linkage conventions for
         the BLAS libraries, however, you can turn off the use of a FORTRAN
         compiler by giving <tt>--without-f77</tt> as an option to the
         configure script, however, this will cause problems unless you
         only want the utility libraries.  The following compilers are
         likely to work:

       <ul>

           <li> EGCS 1.1.2, available from <a
                href="http://gcc.gnu.org">http://gcc.gnu.org</a> for
                Linux/IA32.  However, there seems to be problems with the C
                and/or math library in RedHat 6.0, so use either Redhat
                5.2, or 6.1 or later.  GCC 2.95.x and prereleases of GCC
                2.96 are known to have problems compiling MPQC.

           <li> IBM xlC 3.1.4 and later.  Use the versions of the
                compilers with the "_r" appended to the name, since SC
                uses multi-threading.

           <li> SGI/IRIX C, C++, and FORTRAN version 7.2.1 work using the
                N32 object format.  Older versions of the SGI compilers,
                in particular 6.0.1, are known to fail.

           <li> SGI/IRIX C, C++, and FORTRAN version 7.2.1 work using the
                64 bit object format.  The <tt>configure</tt> script must
                be given the following options to build 64 bit executables:
                <tt>--with-cc="cc -64" --with-cxx="CC -64" --with-f77="f77
                -64"</tt>

           <li> Compaq/Alpha/Linux with Compaq C++.

           <li> Compaq/Alpha/Tru64 V4.0 with C++ V6.2-024.

           <li> Sun/Solaris 2.7 with Workshop 5.0.  There are still
                bugs in this environment, but Hartree-Fock optimizations
                seem to work.

       </ul>

    <li> The Basic Linear Algebra Subprograms (BLAS) are required.  They
         can be obtained from <a
         href="http://www.netlib.org/blas">http://www.netlib.org/blas</a>.
         If the BLAS library is not named libblas.a or is not installed in
         the default library search path, then configure must be given
         --with-libs, --with-libdirs, or both.

    <li> The Linear Algebra Package (LAPACK) 3.0 is required.  It can be
         obtained from <a
         href="http://www.netlib.org/lapack">http://www.netlib.org/lapack</a>.
         If LAPACK library is not named liblapack.a or is not installed in
         the default library search path, then configure must be given
         --with-libs, --with-libdirs, or both.

    <li> GNU flex (version 2.5.2 or greater): This is a lexical analyzer
         generator used to generate code to read input files. Make sure
         that <tt>FlexLexer.h</tt> from flex is in your include path. You
         may need to give the path to <tt>FlexLexer.h</tt> to configure
         with an argument that looks something like:
         <tt>--with-include=-I/usr/local/include</tt>

    <li> GNU bison (version 1.24 or greater): This is a parser generator used
         to generate code to read input files.

    <li> GNU gmake (version 3.70 or greater): GNU specific extensions to make
         are used extensively.

    <li> perl: This is used to convert template classes to macros, generate
         and check the validation suite etc.  To compile SC, either perl 4
         or perl 5 will work.  To generate the validation inputs and
         automatically check the outputs, perl 5.003 or later is needed.

    <li> A library supporting the Message Passing Interface (MPI) is
         required to use MPQC in parallel on distributed memory machines.
         To use MP2 in parallel a thread-safe MPI is needed.  For Linux, <a
         href="http://www.mpi-softtech.com">MPI Software Technology,
         Inc.</a> has developed a thread-safe MPI.

  </ul>

\section compileconf Configuration

 You can build MPQC in the source code directory or you can make a
companion directory which will be used to hold all of the files generated
by the compilation.  You may name this directory anything you want.
Typically, this directory is named to indicate the architecture
(e.g. <tt>mpqc.i686-linux</tt>) and will be referred to as the target
directory below.

 In the target directory execute the <tt>configure</tt> command which is
located in the SC source directory.  Use the absolute pathname to the
configure script.  This command should build a hierarchy of target
directories and the necessary makefiles. Do a <tt>configure --help</tt> to
see a list of options.  Options are specified with an equals sign, as in
<tt>configure --prefix=/usr/local</tt>.  Some options, such as all the
<tt>enable</tt> and <tt>disable</tt> options, do not require an argument.
Useful options to configure include:

<dl>

<dt><tt>--prefix</tt><dd>Specifies the installation directory.  The default
  is <tt>/usr/local/mpqc/</tt><i>version-number</i>

<dt><tt>--enable-debug</tt><dd>Options for debugging will be given to the
  compiler.  Use <tt>--enable-debug=opt</tt> to use both debugging and
  optimization options.

<dt><tt>--disable-parallel</tt><dd>Do not try to find communications
  libraries.

<dt><tt>--disable-threads</tt><dd>Do not try to find the multi-thread
  libraries.

<dt><tt>--enable-stl</tt><dd>Use the Standard Template Library for some of
  the container classes.  Your compiler must have a working STL
  implementation.

<dt><tt>--enable-ref-debug</tt><dd>Check for overwrites and overflows of
  reference counts.  Implied by ``--enable-debug''.

<dt><tt>--disable-ref-macros</tt><dd>Use template classes for reference
  counting.  The default is to use a CPP macro to generate a class
  definition.

<dt><tt>--enable-cross-compile</tt><dd>If this option is set then the
  configure script will take care to not execute any compiled test
  programs.

<dt><tt>--enable-shared-libs</tt><dd>This will generate shared objects and
  link with them instead of standard ``.a'' libraries.  This works on a
  Linux-ELF system.

<dt><tt>--with-cc</tt><dd>Gives the name of the C compiler.

<dt><tt>--with-cxx</tt><dd>Gives the name of the C++ compiler.

<dt><tt>--with-f77</tt><dd>Gives the name of the FORTRAN compiler.

<dt><tt>--without-f77</tt><dd>configure will not try to find a FORTRAN
  compiler.  This can only be used if nothing more than the utility
  libraries are needed.

<dt><tt>--with-ranlib</tt><dd>Gives the name of the archive indexing
  utility.

<dt><tt>--with-ar</tt><dd>Gives the name of the program that makes
  libraries.

<dt><tt>--with-ld</tt><dd>Gives the name of the object linker.

<dt><tt>--with-include</tt><dd>Gives directories in which include files
  should be sought.  For example, <tt>--with-include="-I/u/local/inc
  -I/u/cljanss/include"</tt>

<dt><tt>--with-libs</tt><dd>Specifies libraries that executables should be
  linked with.  For example, <tt>--with-libs=-llapack_IRIX.a</tt>.

<dt><tt>--with-libdirs</tt><dd>Gives the directories in which libraries
  should be sought.  For example,
  <tt>--with-libdirs=-L/usr/local/lib64</tt>.

</dl>

  If you would like to further customize your target directory,
you can edit <tt>src/lib/scconfig.h</tt> and <tt>lib/LocalMakefile</tt> to
suit your needs.  The next time you run configure, these files and
all the makefiles will be overwritten.

\section compilecomp Compilation

 Now you are ready to build the libraries and executables.  Do this by
typing <tt>make</tt> in your target directory.  If you are running on a
symmetric multi-processor, you can use GNU make to parallelize the
compilation.  To compile four files at a time, type <tt>make -j4</tt>.
This feature works correctly with GNU make version 3.78.1 or later; for
older versions of GNU make use <tt>make JOBS=-j4</tt>.

 You can install the executables and data files with <tt>make install</tt>.

 You can install the libraries and header files with <tt>make
install_devel</tt>, however, <tt>make install</tt> must be also be run to
install the files needed for run-time support.

*/
