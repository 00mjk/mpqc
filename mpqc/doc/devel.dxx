
/**@name Developing Code Using SC
   
   In addition to the executables, the Scientific Computing Toolkit
   libraries and include files can be installed on your machine.
   This is described in the \Ref{Compiling} section of this manual.

   @memo How to use the Scientific Computing Toolkit in your code.
  */

//@{

/**@name The sc-config Program

  The sc-config program returns information about how SC was compiled
  and installed.  The following information is available:

  \begin{itemize}
     \item[--prefix] The directory where SC is installed.
     \item[--version] The version of SC.
     \item[--libs] The libraries and library paths needed to link.
     \item[--cppflags] The include directories.
     \item[--cc] The C compiler.
     \item[--cflags] The C flags.
     \item[--cxx] The C++ compiler.
     \item[--cxxflags] The C++ compiler flags.
     \item[--f77] The FORTRAN 77 compiler.
     \item[--f77flags] The FORTRAN 77 compiler flags.
  \end{itemize}

  To use the sc-config program to link your executable to SC, use a
  Makefile for GNU make similar to the following:

\begin{verbatim}
SCCONFIG = /usr/local/mpqc/current/bin/sc-config
CXX := $(shell $(SCCONFIG) --cxx)
CXXFLAGS := $(shell $(SCCONFIG) --cxxflags)
CPPFLAGS := $(shell $(SCCONFIG) --cppflags)
LIBS := $(shell $(SCCONFIG) --libs)

myprog: myprog.o
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LIBS)
\end{verbatim}

*/

/**@name Initializing SC

First the execution environment must be initialized using
the \Ref{ExEnv} init member.

\begin{verbatim}
  ExEnv::init(argc, argv);
\end{verbatim}

By default, all output will go to the console stream, cout.  To change
this, use the following code:

\begin{verbatim}
  ostream *outstream = new ofstream(outputfilename);
  ExEnv::set_out(outstream);
\end{verbatim}

MPI is allowed wait until MPI_Init to fill in argc and argv, so we may have
to call MPI_Init before we even know that we ready to construct
MPIMessageGrp.  So if an MPIMessageGrp is needed, it is up to the developer
to call MPI_Init to get the argument list for certain MPI implementations.

\begin{verbatim}
  MPI_Init(&argc, &argv);
\end{verbatim}

When files are read and written, an extension is added to a
basename to construct the file name.  The default is "SC".
To use another basename, make the following call:

\begin{verbatim}
  SCFormIO::set_default_basename(basename);
\end{verbatim}

If your job might run in parallel, then make the following
call or the nodes will print redundant information.

\begin{verbatim}
  SCFormIO::init_mp(myproc);
\end{verbatim}

This segment of code sets up the threading object:

\begin{verbatim}
  RefThreadGrp thread = ThreadGrp::initial_threadgrp(argc, argv);
  ThreadGrp::set_default_threadgrp(thread);
  if (thread.nonnull())
    ThreadGrp::set_default_threadgrp(thread);
  else
    thread = ThreadGrp::get_default_threadgrp();
\end{verbatim}

This segment of code sets up the message passing object:

\begin{verbatim}
  RefMessageGrp grp = MessageGrp::initial_messagegrp(argc, argv);
  if (grp.nonnull())
    MessageGrp::set_default_messagegrp(grp);
  else
    grp = MessageGrp::get_default_messagegrp();
\end{verbatim}


*/

//@}
