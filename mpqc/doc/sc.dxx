
/**@name The Massively Parallel Quantum Chemistry Program (MPQC) and the Scientific Computing Toolkit (SC)

The Scientific Computing toolkit (SC) provides C++ class libraries for
scientific computation.  Included are classes for managing memory, saving
and restoring the state of objects, reading objects from an input file,
parallel communication, matrix algebra, among others.

Class libraries supporting quantum chemistry applications are provided with
the full distribution of SC.  Also included is the Massively Parallel
Quantum Chemistry program (MPQC) which is built upon these libraries.

MPQC and SC are works-in-progress.  They are experimental codes that are
used to apply new computational approaches to problems in scientific
programming in general and, in particular, to quantum chemistry.  Thus,
this manual is incomplete.  Furthermore, some of the classes in the
distribution may be on the verge of obsolescence and others may be
unfinished work that are intended to provide new functionality in later
releases.

The development of SC has been driven by the development of the Massively
Parallel Quantum Chemistry (MPQC) program.  While, currently, MPQC and SC
are distributed together, the SC code is problem-domain independent.  For
example, the utility classes provided in src/lib/util do not require the
code in src/lib/math or src/lib/chemistry and the src/lib/math classes do
not require src/lib/chemistry.

MPQC and SC run on Unix compatible workstations (Intel/Linux, SGI/IRIX IBM
RS/6000), symmetric multi-processors (Intel/Linux, SGI/IRIX), and massively
parallel computers (IBM SP, Intel Paragon).

@memo Libraries and Programs for Quantum Chemistry and Scientific Programming.
*/

//@{

/**@name Obtaining SC and MPQC

   The Scientific Computing toolkit (SC) and the Massively Parallel Quantum
   Chemistry program (MPQC) are distributed together.  The library code is
   distributed under the Library GNU Public License and the accompanying
   programs are distributed under the GNU Public License.

   The latest version of the source code is available from
   \URL{http://aros.ca.sandia.gov/~cljanss/mpqc}

   @memo SC and MPQC can be downloaded from the internet.
 */

/**@name Source Structure

\begin{description}
\item[{\tt bin}]  This directory mainly contains commands that
  are used to help with the compilation of SC.

\item[{\tt lib/basis}] The Gaussian basis set data files are in this
  directory.

\item[{\tt lib/elisp}] If you are an emacs user, some useful
  modes and C++ programming style specifications can be found
  here.

\item[{\tt lib/perl}] Perl modules that are used by the MPQC
  validation suite are found here.

\item[{\tt src/lib/util/options}]
  This contains the GetLongOpt command line argument parsing facility
  written by S. Manoharan, with some modifications.

\item[{\tt src/lib/util/ref}]
  This library provides memory management for objects.
  See \Ref{The Reference Library} for more information.

\item[{\tt src/lib/util/container}] This library provides container
  classes.  Some of these classes are not very efficient and it is likely
  that they will be replaced by the C++ Standard Template Library when it
  is supported fully by more compilers.

\item[{\tt src/lib/util/misc}] This contains a variety of independent
  classes that don't belong anywhere else.  Here one can find classes to
  assist with debugging, provide information about hte execution
  environment, help make the output prettier, maintain detailed timing
  information, etc.

\item[{\tt src/lib/util/class}] This library provides base classes for
  classes that require meta-information about the class.  This
  meta-information includes the class name, meta-information about the
  parent class and derived classes, pointers to functions that can create
  instances of the class, and so on.  See \Ref{The Described Class Library}
  for more information.

\item[{\tt src/lib/util/keyval}] This library provides classes that read
  keyword/value pairs from an input file.  See \Ref{The KeyVal Library}
  for more information.

\item[{\tt src/lib/util/state}] The state library provides a base class
  for persistent objects and classes to read and write these objects to a
  stream.  See \Ref{The State Library} for more information.

\item[{\tt src/lib/util/group}] This group library provides classes to
  utilize multiple processors of a parallel machine.  Message passing,
  distributed shared memory, and multi-threaded models are supported.
  See \Ref{The Group Library} for more information.

\item[{\tt src/lib/util/render}] This library provides a standard
  interface to rendering packages.

\item[{\tt src/lib/math/linpackd}] This library contains double precision
  C versions of some of the linpack routines.

\item[{\tt src/lib/math/scmat}] This library defines an abstract matrix
  class and supplies concrete implementations of parallel replicated and
  distributed matrices.  See \Ref{The Matrix Library} for more information.

\item[{\tt src/lib/math/optimize}] The optimize library provides classes
  to perform optimizations and base classes for objects that compute a
  scalar quantity as a function of several coordinates.

\item[{\tt src/lib/math/topology}] These utility classes will be replaced
  in a future release of SC.

\item[{\tt src/lib/math/isosurf}] This library can be used to compute a
  triangulated approximation to an isosurface.

\item[{\tt src/lib/math/symmetry}] The symmetry library contains classes
  useful for describing point group symmetry.  See \Ref{The Symmetry Library}
  for more information.

\item[{\tt src/lib/chemistry/molecule}] This library has classes to
  describe molecules and internal molecular coordinates. A base class for
  classes that map the molecular coordinates to an energy is provided to
  permit the optimization of the molecular coordinates.

\item[{\tt src/lib/chemistry/solvent}]  This code can be used to
  describe solvated molecules.

\item[{\tt src/lib/chemistry/qc/basis}] The basis library has classes
  that describe Gaussian basis sets and base classes for libraries that
  compute integrals involving these functions.

\item[{\tt src/lib/chemistry/qc/oint3}] This library is comprised of
  machine generated code that is only used by the intv3 library.

\item[{\tt src/lib/chemistry/qc/intv3}] The intv3 library computes
  integrals involving Gaussian basis functions.

\item[{\tt src/lib/chemistry/qc/wfn}] The wfn library contains base
  classes for classes that, given a molecule and a basis set, compute the
  energy and other properties of the molecule.

\item[{\tt src/lib/chemistry/qc/scf}] The scf library is used to compute
  self-consistent-field energies and gradients.  Specializations for
  Hartree-Fock theory are provided.

\item[{\tt src/lib/chemistry/qc/scf}] The dft library provides
  implementations of density functional theory energies and gradients.

\item[{\tt src/lib/chemistry/qc/mbpt}] This library computes second-order
  perturbation theory energies and gradients.

\item[{\tt src/lib/chemistry/qc/psi}] This provides an example of
  interfacing MPQC to an external quantum chemistry package.

\item[{\tt src/bin/mpqc}] The Massively Parallel Quantum Chemistry program
  is in this directory.  See \Ref{The MPQC Program} for more information.

\item[{\tt src/bin/scls}] This program lists the contents of files created
  by \Ref{The State Library}.  See \Ref{The scls Program} for more
  information.

\item[{\tt src/bin/scpr}] This program prints objects contained in files
  created by \Ref{The State Library}.  See \Ref{The scpr Program} for more
  information.

\end{description}

 @memo A brief description of each of the directories in the distribution.
 */

  //@Include: compiling.dxx

/**@name Binary Documentation
  @memo Additional documentation for accompanying executables.
  */

//@{
  //@Include: binary.dxx
//@}

/**@name Library Documentation
  @memo Additional documentation for selected libraries.
  */

//@{
  //@Include: library.dxx
//@}

/**@name Include Files
  @memo A listing, by directory, of documented include files.
  */

//@{
  //@Include: include.dxx
//@}

//@}
