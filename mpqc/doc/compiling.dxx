
/**@name Compiling SC

These instructions are for a machine running Unix or Unix-like system. The
codes work under Linux, and AIX, at least.  The code has also been built
under MS Windows NT using the Cygnus development tools.
*/

//@{

/**@name Prerequisites

Make sure that you have the following programs available. Most can be found
at any GNU software FTP repository.

  \begin{itemize}

    \item Compilers for the C and C++ languages are needed.
       \begin{itemize}
           \item GNU gcc 2.7.2 or later works.  We highly recommend the GNU
               compiler which can be installed on many architectures.  It
               can be obtained by FTP from prep.ai.mit.edu.

           \item IBM xlC 3.1.3 or later works.

           \item SGI CC 6.0.1 and later.  Virtual base classes are broken
               in SGI's compiler and the configure script should
               automatically turn these off.  Give a target name to
               the configure script that contains the cpu model and
               OS minor number to get the right compiler options.
               For example, #configure r8000-sgi-irix6.0.1# or
               #configure r10000-sgi-irix6.2#.  The compiler
               might warn that some OPT limits need to be increased
               to fully optimize the code.  Increasing them won't
               make the code much faster, but the compile will be
               slower and use a great deal of memory.

       \end{itemize}

    \item GNU flex (version 2.5.2 or greater): This is a lexical analyzer
          generator used to generate code to read input files. Make sure
          that FlexLexer.h from flex is in your include path. You may need
          to give the path to it to configure with an argument that looks
          something like: #--with-include=-I/usr/local/include#

    \item GNU bison (version 1.24 or greater): This is a parser generator used
          to generate code to read input files.

    \item GNU gmake (version 3.70 or greater): GNU specific extensions to make
          are used extensively.

    \item perl: This is used to convert template classes to macros,
          generate documentation, generate and check the validation suite
          etc.  To compile SC, either perl 4 or perl 5 will work.  To
          generate the validation inputs and automatically check the
          outputs, perl 5.003 is needed.

  \end{itemize}

*/

/**@name Configuration

 You can optionally make a sister directory to #SC# which will be
used to hold all of the files generated by the compilation.  This directory
is usually named to indicate the architecture (e.g. #SC.i686-linux#)
and will be referred to as the target directory below.

 In the target directory execute the "configure" command which is located
in the SC source directory. This command should build a hierarchy of target
directories and the necessary makefiles. Do a #configure --help# to see a
list of options.  Useful options to configure include:

\begin{description}
\item[#--enable-debug#] Options for debugging will be given to
the compiler.
\item[#--disable-parallel#] Do not try to find communications
libraries.
\item[#--enable-ref-debug#] Check for overwrites and overflows
for reference counts.  Implied by ``--enable-debug''.
\item[#--disable-ref-macros#] Use template classes for reference
counting.  This doesn't work with any known compiler.  The default is to
use a CPP macro to generate a class definition.
\item[#--enable-cross-compile#] If this option is set then the
configure script will take care to not execute any compiled test programs.
\item[#--enable-shared-libs#] This will generate shared objects and
link with them instead of standard ``.a'' libraries.  This works on a
Linux-ELF system.
\item[#--with-cc#] Gives the name of the C compiler.
\item[#--with-cxx#] Gives the name of the C++ compiler.
\item[#--with-ranlib#] Gives the name of the archive indexing utility.
\item[#--with-ar#] Gives the name of the program than makes libraries.
\item[#--with-ld#] Gives the name of the object linker.
\item[#--with-include#] Gives directories in which include files
should be sought.  For example, #--with-include="-I/u/local/inc -I/u/cljanss/include"#
\item[#--with-libs#] Specifies libraries that executables should be
linked with.
\item[#--with-libdirs#] Gives the directories in which libraries
should be sought.
\end{description}

  If you would like to further customize your target directory,
you can edit #src/lib/config.h# and #lib/LocalMakefile# to
suit your needs.

*/

/**@name Compiling SC

 First you need to generate several include files to satisfy
cross-dependencies between libraries.  Do this by changing into
your target directory and type #make interface#.  If you get error
messages in this step do a #make distclean# after correcting the
problem since there might be some incorrectly generated include or source
files remaining.

 Now you are ready to build the libraries and executable.  Do this by
typing #make# in your target directory.  If you are running on a
symmetric multi-processor, you can use GNU make to parallelize the
compilation.  To compile four files at a time, type #make JOBS=-j4#.

*/

//@}
