
/**@name Compiling

   These instructions are for a machine running Unix or Unix-like
   system. The codes work under recent versions of Linux, AIX, and IRIX at
   least.  The vendor's compiler for each of these systems should work.

   @memo Instructions for compiling SC.
  */

//@{

/**@name Prerequisites

Make sure that you have the following programs available. Most can be found
at any GNU software FTP repository.

  \begin{itemize}

    \item Compilers for the C, C++, and FORTRAN languages are needed.  The
          FORTRAN compiler is used to determine the linkage conventions for
          the BLAS libraries, however, you can turn off the use of a
          FORTRAN compiler by giving #--without-f77# as an option to the
          configure script.  Turning off the FORTRAN support should work fine
          with the current release, but will break things in future
          releases.  The following compilers are known to work:

       \begin{itemize}

           \item EGCS 1.1.2 and GCC 2.95.1, both available from
                 \URL{http://egcs.cygnus.com}, seem to work.  However,
                 there seem to be problems with the C and/or math library
                 in RedHat 6.0, so use either Redhat 5.2 or 6.1.

           \item IBM xlC 3.1.4 and later.  Use the versions of the
                 compilers with the "_r" appended to the name, since SC
                 uses multi-threading.

           \item SGI/IRIX C, C++, and FORTRAN version 7.2.1 work using the
                 N32 object format.  Older versions of the SGI compilers,
                 in particular 6.0.1, are known to fail.

           \item SGI/IRIX C, C++, and FORTRAN version 7.2.1 work using the
                 64 bit object format.  The #configure# script must be
                 given the following options: #--with-cc="cc -64"
                 --with-cxx="CC -64" --with-f77="f77 -64"# to build 64 bit
                 executables.

       \end{itemize}

    \item GNU flex (version 2.5.2 or greater): This is a lexical analyzer
          generator used to generate code to read input files. Make sure
          that FlexLexer.h from flex is in your include path. You may need
          to give the path to it to configure with an argument that looks
          something like: #--with-include=-I/usr/local/include#

    \item GNU bison (version 1.24 or greater): This is a parser generator used
          to generate code to read input files.

    \item GNU gmake (version 3.70 or greater): GNU specific extensions to make
          are used extensively.

    \item perl: This is used to convert template classes to macros,
          generate documentation, generate and check the validation suite
          etc.  To compile SC, either perl 4 or perl 5 will work.  To
          generate the validation inputs and automatically check the
          outputs, perl 5.003 or later is needed.

  \end{itemize}

*/

/**@name Configuration

 You can optionally make a companion directory to #SC# which will be
used to hold all of the files generated by the compilation.  This directory
is usually named to indicate the architecture (e.g. #SC.i686-linux#)
and will be referred to as the target directory below.

 In the target directory execute the "configure" command which is located
in the SC source directory.  Use the absolute pathname to the configure
script.  This command should build a hierarchy of target directories and
the necessary makefiles. Do a #configure --help# to see a list of options.
Options are specified with an equals sign, as in #configure
--prefix=/usr/local#.  Some options, such as all the #enable# and #disable#
options, do not require an argument.  Useful options to configure include:

\begin{description}
\item[#--prefix#] Specifies the installation directory.
\item[#--enable-debug#] Options for debugging will be given to
the compiler.  Use #--enable-debug=opt# to use both debugging
and optimization options.
\item[#--disable-parallel#] Do not try to find communications
libraries.
\item[#--disable-threads#] Do not try to find the multi-thread libraries.
\item[#--enable-stl#] Use the Standard Template Library for some of the
container classes.  Your compiler must have a working STL implementation.
\item[#--enable-ref-debug#] Check for overwrites and overflows
for reference counts.  Implied by ``--enable-debug''.
\item[#--disable-ref-macros#] Use template classes for reference
counting.  This doesn't work with any known compiler.  The default is to
use a CPP macro to generate a class definition.
\item[#--enable-cross-compile#] If this option is set then the
configure script will take care to not execute any compiled test programs.
\item[#--enable-shared-libs#] This will generate shared objects and
link with them instead of standard ``.a'' libraries.  This works on a
Linux-ELF system.
\item[#--with-cc#] Gives the name of the C compiler.
\item[#--with-cxx#] Gives the name of the C++ compiler.
\item[#--with-f77#] Gives the name of the FORTRAN compiler.
\item[#--without-f77#] configure will not try to find a FORTRAN compiler.
\item[#--with-ranlib#] Gives the name of the archive indexing utility.
\item[#--with-ar#] Gives the name of the program than makes libraries.
\item[#--with-ld#] Gives the name of the object linker.
\item[#--with-include#] Gives directories in which include files
should be sought.  For example, #--with-include="-I/u/local/inc -I/u/cljanss/include"#
\item[#--with-libs#] Specifies libraries that executables should be
linked with.  If FORTRAN libraries for BLAS are needed, then they
must be specified here.
\item[#--with-libdirs#] Gives the directories in which libraries
should be sought.
\end{description}

  If you would like to further customize your target directory,
you can edit #src/lib/config.h# and #lib/LocalMakefile# to
suit your needs.

*/

/**@name The Compilation

 Now you are ready to build the libraries and executable.  Do this by
typing #make# in your target directory.  If you are running on a
symmetric multi-processor, you can use GNU make to parallelize the
compilation.  To compile four files at a time, type #make JOBS=-j4#.

 You can install the executables and data files with #make install#.

 You can install the libraries and header files with #make install_devel#,
however, #make install# must be also be run to install the files needed for
run-time support.


*/

//@}
