
#################################################
#
# the user can specify the following targets
#
#  install_inc::
#    installs the include files
#
#  default::
#
# the user must define the following:
#
#
# TARGET_TO_MAKE
#
# BIN_OR_LIB = BIN or LIB
#
# TRUESRC
#
# DEPENDINCLUDE
#
# TRUEINCLUDES
#
# OTHERFILES
#
# LIBOBJ
# BINOBJ
#
# LIBS
#
# SGENFILE
# SGENSRC
# SGENINC
#
# SABER_FILES
#
#################################################

.PHONY: default install install_inc install_target clean

default::

ifeq ($(BIN_OR_LIB),LIB)

$(TARGET_TO_MAKE).$(LIBSUF): $(LIBOBJ)
	/bin/rm -f $(@F)
	$(AR) $(ARFLAGS) $(@F) $^
	$(RANLIB) $(@F)

install: install_inc install_target

install_inc::

# sample install_inc rule:
#install_inc:: $(INC) $(GENINC)
#	$(INCINSTALL) $^ $(INCDIR)/SC/$(THISDIR)

install_target:: $(TARGET_TO_MAKE).$(LIBSUF)
	$(INSTALL) $(INSTALLLIBOPT) $(TARGET_TO_MAKE).$(LIBSUF) $(LIBDIR)
	$(RANLIB) $(LIBDIR)/$(TARGET_TO_MAKE).$(LIBSUF)
endif

ifeq ($(BIN_OR_LIB),BIN)

$(TARGET_TO_MAKE): $(BINOBJ) $(LIBS)
	$(LD) $(LDFLAGS) $^ -o $(@F) $(SYSLIBS)

install: install_target

install_target: $(TARGET_TO_MAKE)
	$(INSTALL) $(INSTALLBINOPT) $(TARGET_TO_MAKE) $(BINDIR)
endif

ifdef SGENFILE
SGENINC := $(SGENINC) $(SGENFILE:%.sgen=%.h)
$(SGENSRC) $(SGENINC): $(SGENFILE)
	$(SGEN) $(SGENFLAGS) $<
endif

# The test is needed to cause tmpl to be run only when
# the target is in the current directory.  This is needed
# because make tries to rebuild out of date files in other
# directories that were not rebuilt because the interface
# didn't change.  This action would result in unused .gbl
# and .lcl files in the current directory.
%.lcl %.gbl: %.c
#	@echo target=$@ dir=$(dir $@)
#	@if [ $(dir $@) = "" ]; then echo null dir: $@ $<; fi
#	@if [ $(dir $@) != "" ]; then echo nonnull dir: $@ $<; fi
	@if [ $(dir $@) = "./" ]; then tmpl $<; fi

%.$(OBJSUF): %.c
	$(CC) $(CFLAGS) -c $< $(OUTPUT_OPTION)

#
# see if we use the f2c fortran replacement
#
ifeq ($(FC),f2c)
%.o: %.f

%.c: %.f
	$(FC) $< > $@.c
else
%.$(OBJSUF): %.f
	$(FC) $(FFLAGS) -c $< $(OUTPUT_OPTION)
endif

%.$(OBJSUF): %.C
	$(CXX) $(CXXFLAGS) -c $< $(OUTPUT_OPTION)

%.$(OBJSUF): %.cc
	$(CXX) $(CXXFLAGS) -c $< $(OUTPUT_OPTION)

#
# cleans
#
clean:: oclean targetclean

distclean:: iclean oclean sgenclean targetclean dclean genclean rclean

iclean::
	-rm -f *.gbl *.lcl

oclean::
	-rm -f *.o

dclean::
	-rm -f *.d

genclean::
ifdef GENINC
	-rm -f $(GENINC)
endif
ifdef GENSRC
	-rm -f $(GENSRC)
endif

sgenclean::
ifdef SGENFILE
	-rm -f $(SGENSRC) $(SGENINC)
endif

targetclean::
ifdef TARGET_TO_MAKE
  ifeq ($(BIN_OR_LIB),BIN)
	-rm -f $(TARGET_TO_MAKE)
  endif
  ifeq ($(BIN_OR_LIB),LIB)
	-rm -f $(TARGET_TO_MAKE).a
  endif
endif

rclean::
	-/bin/rm -f REMOTE/$(HOST).* $(REMOTEDIR)/$(HOST)/$(TARGET_TO_MAKE).tar*

#
# If a makefile generates include files, these should be targets of interface.
#
.PHONY: interface
interface::

#
# dependencies
#

%.d: %.c
	$(CC) -M -c $(CFLAGS) $< | sed 's/$*.o/$*.o $*.d/g' > $(@F)

%.d: %.cc
	$(CXX) -M -c $(CXXFLAGS) $< | sed 's/$*.o/$*.o $*.d/g' > $(@F)

#
# sometimes it's nice to get assembler source
#
%.s: %.c
	$(CC) $(CFLAGS) -S $<

%.s: %.cc
	$(CXX) $(CXXFLAGS) -S $<

#
# sometimes it's nice to get preprocessed source
#
%.i: %.c
	$(CC) $(CFLAGS) -E $< -o $@

%.ii: %.cc
	$(CXX) $(CXXFLAGS) -E $< -o $@

#
# remote stuff
#
FILES = $(TRUESRC) $(TRUEINCLUDES) Makefile $(OTHERFILES) $(SGENFILE)

REMOTEFILES=$(FILES:%=REMOTE/$(HOST).%)

remote: REMOTE $(REMOTEDIR)/$(HOST) uncompress_tar $(REMOTEFILES)
	$(COMPRESS) $(REMOTEDIR)/$(HOST)/$(TARGET_TO_MAKE).tar

$(REMOTEDIR)/$(HOST):
	@if [ ! -d $@ ] ; then mkdir $@; fi

REMOTE:
	@if [ ! -d $@ ] ; then mkdir $@; fi

uncompress_tar:
	-$(UNCOMPRESS) $(REMOTEDIR)/$(HOST)/$(TARGET_TO_MAKE).tar

REMOTE/$(HOST).%: %
	@tar rvf $(REMOTEDIR)/$(HOST)/$(TARGET_TO_MAKE).tar $< || tar cvf $(REMOTEDIR)/$(HOST)/$(TARGET_TO_MAKE).tar $<
	@touch $@

extract:
	chmod u+w $(FILES)
	zcat $(REMOTEDIR)/$(TARGET_TO_MAKE).tar | tar xvf -

CWDIR = $(shell pwd)
saber: $(SABER_FILES)
	#setopt path $(CWDIR)
	#load $(INCLUDE) $(DEFINES) $(SABER_FILES)

tar: $(TARGET_TO_MAKE).tar.Z

$(TARGET_TO_MAKE).tar.Z: $(FILES)
	tar cvf - $(FILES) | compress > $(@F)

$(TARGET_TO_MAKE)_pl%:
	@if [ !-d $(@F) ]; then mkdir $(@F) ; fi
	/bin/cp $(FILES) $(@F)

$(TARGET_TO_MAKE).patch%: $(TARGET_TO_MAKE)_pl%
	@-FOO=`echo $*-1|bc`; diff -cr $(TARGET_TO_MAKE)_pl$${FOO} $< > $(@F);\
    echo " " > /dev/null

values::
	@echo TOPDIR=$(TOPDIR)
	@echo SRCDIR=$(SRCDIR)
	@echo VPATH=$(VPATH)
	@echo BIN_OR_LIB=$(BIN_OR_LIB)
	@echo TARGET_TO_MAKE=$(TARGET_TO_MAKE)
ifdef LIBS
	@echo LIBS=$(LIBS)
endif
ifeq ($(BIN_OR_LIB),LIB)
	@echo LIBOBJ=$(LIBOBJ)
endif
ifeq ($(BIN_OR_LIB),BIN)
	@echo BINOBJ=$(BINOBJ)
endif
ifdef SGENFILE
	@echo SGENFILE=$(SGENFILE)
	@echo SGENSRC=$(SGENSRC)
	@echo SGENINC=$(SGENINC)
endif

