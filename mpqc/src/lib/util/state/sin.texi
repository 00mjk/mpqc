@c -*-texinfo-*-
@node The StateIn Class, , , The State Library
@section The StateIn Class
@clindex StateIn

The @code{StateIn} class provides the input support needed to restore
objects.

The @code{StateIn} class has the following interface:
@table @code
@item virtual void get(char&)
@itemx virtual void get(int&)
@itemx virtual void get(float&)
@itemx virtual void get(double&)
@itemx virtual void get(char*&)
@itemx virtual void get(int*&)
@itemx virtual void get(float*&)
@itemx virtual void get(double*&)
These restores data saved with @code{StateOut::put}.

@item virtual void getstring(char*&)
This restores strings saved with @code{StateOut::putstring}.

@item virtual void get(ClassDesc**,int&)
This restores @code{ClassDesc}'s.  The @code{int} argument is
set to the version number of the saved class.

@item virtual int  getpointer(void**)
This is used to restore a pointer.  It is called with the
pointer to the pointer being restored.  If the data being
restored has previously been restored, then the pointer being
restored is set to a reference to the previously restored object
and 0 is returned.  If the return value is nonzero then storage
must be allocated for the data and the pointer to the new data
along with the return value from @code{getpointer} must be given
as arguments to the @code{havepointer} routine.  Note that
@code{getpointer} and @code{havepointer} are automatically called for
all of the above data types and need not be used, except for two
dimensional arrays and other special situations.

@item virtual void havepointer(int,void*)
When storage has been allocated during object restoration, this
routine is called with the object reference number and the pointer
to the new storage so @code{getpointer} can find the data if it
is referenced again.
@end table

Implementations of the @code{StateIn} class have been realized in
the @code{StateInFileBin} and @code{StateInFileText} classes which
restore data write by @code{StateOutFileBin} and @code{StateOutFileText}
respectively.

