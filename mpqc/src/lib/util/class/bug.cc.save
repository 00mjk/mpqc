
extern "C" {
    int printf(const char*, ...);
    char* strcpy(char*, const char*);
    unsigned int strlen(const char*);
}

class ClassKey {
  private:
    char* classname_;
  public:
    ClassKey(const char* name);
    ClassKey(const ClassKey&);
    ~ClassKey();
  };

ClassKey::ClassKey(const char* name)
//   :classname_(strcpy(new char[strlen(name)+1],name))
{
}

ClassKey::ClassKey(const ClassKey& key)
{
//   if (key.classname_) {
//       classname_ = strcpy(new char[strlen(key.classname_)+1],key.classname_);
//     }
//   else {
//       classname_ = 0;
//     }
}

ClassKey::~ClassKey()
{
//   delete[] classname_;
}

class B {
  private:
    int i;
  public:
    B();
    B(const B&);
    ~B();
};

B::B()//:i(ii)
{
}
B::B(const B&b)
{
//   if (b.i) {
//       i = b.i;
//     }
//   else {
//       i = 0;
//     }
}
B::~B()
{
}

class A {
  public:
    A(ClassKey,void*,int=0,int=0,int=1);
    A(B,void*,int=0,int=0,int=1);
};

A::A(ClassKey,void*,int,int,int)
{
  printf("A::A: this = 0x%x\n",this);
}

A::A(B,void*,int,int,int)
{
  printf("A::A: this = 0x%x\n",this);
}

extern "C" {
    int cpp_main();
}

cpp_main()
{
  B b;
  ClassKey y("Y");
  A* a = new A(y,0);
  printf("a = 0x%x\n",a);
  a = new A(b,0);
  printf("a = 0x%x\n",a);
}
