// 
// File:          MPQC_IntegralEvaluator2_Impl.hh
// Symbol:        MPQC.IntegralEvaluator2-v0.2
// Symbol Type:   class
// Babel Version: 0.10.2
// Description:   Server-side implementation for MPQC.IntegralEvaluator2
// 
// WARNING: Automatically generated; only changes within splicers preserved
// 
// babel-version = 0.10.2
// 

#ifndef included_MPQC_IntegralEvaluator2_Impl_hh
#define included_MPQC_IntegralEvaluator2_Impl_hh

#ifndef included_sidl_cxx_hh
#include "sidl_cxx.hh"
#endif
#ifndef included_MPQC_IntegralEvaluator2_IOR_h
#include "MPQC_IntegralEvaluator2_IOR.h"
#endif
// 
// Includes for all method dependencies.
// 
#ifndef included_Chemistry_QC_GaussianBasis_DerivCenters_hh
#include "Chemistry_QC_GaussianBasis_DerivCenters.hh"
#endif
#ifndef included_Chemistry_QC_GaussianBasis_Molecular_hh
#include "Chemistry_QC_GaussianBasis_Molecular.hh"
#endif
#ifndef included_Chemistry_QC_GaussianBasis_ObIntEvalType_hh
#include "Chemistry_QC_GaussianBasis_ObIntEvalType.hh"
#endif
#ifndef included_Chemistry_QC_GaussianBasis_Package_hh
#include "Chemistry_QC_GaussianBasis_Package.hh"
#endif
#ifndef included_Chemistry_QC_GaussianBasis_TbIntEvalType_hh
#include "Chemistry_QC_GaussianBasis_TbIntEvalType.hh"
#endif
#ifndef included_Chemistry_QC_GaussianBasis_TbIntType_hh
#include "Chemistry_QC_GaussianBasis_TbIntType.hh"
#endif
#ifndef included_MPQC_IntegralEvaluator2_hh
#include "MPQC_IntegralEvaluator2.hh"
#endif
#ifndef included_sidl_BaseInterface_hh
#include "sidl_BaseInterface.hh"
#endif
#ifndef included_sidl_ClassInfo_hh
#include "sidl_ClassInfo.hh"
#endif


// DO-NOT-DELETE splicer.begin(MPQC.IntegralEvaluator2._includes)
#include <chemistry/qc/basis/gaussbas.h>
#include <chemistry/qc/intv3/cartitv3.h>
#include <chemistry/qc/intv3/intv3.h>
#include <Chemistry_QC_GaussianBasis_Package.hh>
#ifdef HAVE_CINTS
  #include <chemistry/qc/cints/cints.h>
#endif
using namespace sc;
using namespace Chemistry::QC::GaussianBasis;
// DO-NOT-DELETE splicer.end(MPQC.IntegralEvaluator2._includes)

namespace MPQC { 

  /**
   * Symbol "MPQC.IntegralEvaluator2" (version 0.2)
   */
  class IntegralEvaluator2_impl
  // DO-NOT-DELETE splicer.begin(MPQC.IntegralEvaluator2._inherits)

  /** IntegralEvaluator2_impl implements a class interface for
      supplying 2-center molecular integrals.

      This is an implementation of a SIDL interface.
      The stub code is generated by the Babel tool.  Do not make
      modifications outside of splicer blocks, as these will be lost.
      This is a server implementation for a Babel class, the Babel
      client code is provided by the cca-chem-generic package.
   */

  // Put additional inheritance here...
  // DO-NOT-DELETE splicer.end(MPQC.IntegralEvaluator2._inherits)
  {

  private:
    // Pointer back to IOR.
    // Use this to dispatch back through IOR vtable.
    IntegralEvaluator2 self;

    // DO-NOT-DELETE splicer.begin(MPQC.IntegralEvaluator2._implementation)
    Chemistry::Molecule molecule_;
    ObIntEvalType ob_eval_type_;
    TbIntEvalType tb_eval_type_;
    Ref<GaussianBasisSet> bs1_, bs2_;
    Ref<Integral> integral_;
    Ref<OneBodyInt> eval_;
    Ref<OneBodyDerivInt> deriv_eval_;
    int max_nshell2_;
    int maxam_;
    sidl::array<double> sidl_buffer_;
    const double *sc_buffer_;
    double *temp_buffer_;
    double *buf_;
    enum { one_body, one_body_deriv, two_body, two_body_deriv };
    int int_type_;
    int deriv_level_;
    Package package_;
    int **reorder_;
    Chemistry::QC::GaussianBasis::DerivCenters deriv_centers_;
    sc::DerivCenters sc_deriv_centers_;
    int deriv_atom_;

    void reorder_intv3(int64_t, int64_t);
    void initialize_reorder_intv3();
    void reorder_doublet( sc::GaussianShell*, sc::GaussianShell*, int, int, int );
    // DO-NOT-DELETE splicer.end(MPQC.IntegralEvaluator2._implementation)

  private:
    // private default constructor (required)
    IntegralEvaluator2_impl() 
    {} 

  public:
    // sidl constructor (required)
    // Note: alternate Skel constructor doesn't call addref()
    // (fixes bug #275)
    IntegralEvaluator2_impl( struct MPQC_IntegralEvaluator2__object * s ) : 
      self(s,true) { _ctor(); }

    // user defined construction
    void _ctor();

    // virtual destructor (required)
    virtual ~IntegralEvaluator2_impl() { _dtor(); }

    // user defined destruction
    void _dtor();

    // static class initializer
    static void _load();

  public:

    /**
     * user defined non-static method.
     */
    void
    set_integral_package (
      /* in */ ::Chemistry::QC::GaussianBasis::Package type
    )
    throw () 
    ;


    /**
     * Initialize as 1-body evaluator.
     * @param bs1 Molecular basis on center 1.
     * @param bs2 Molecular basis on center 2.
     * @param type ObIntEvalType specifying eval type.
     * @param max_deriv Max derivative to compute.
     * @param storage Available storage in bytes.
     * @param deriv_ctr Derivative center descriptor. 
     */
    void
    obint_initialize (
      /* in */ ::Chemistry::QC::GaussianBasis::Molecular bs1,
      /* in */ ::Chemistry::QC::GaussianBasis::Molecular bs2,
      /* in */ ::Chemistry::QC::GaussianBasis::ObIntEvalType type,
      /* in */ int32_t max_deriv,
      /* in */ int64_t storage,
      /* in */ ::Chemistry::QC::GaussianBasis::DerivCenters deriv_ctr
    )
    throw () 
    ;


    /**
     * Initialize as 2-body evaluator.
     * @param bs1 Molecular basis on center 1.
     * @param bs2 Molecular basis on center 2.
     * @param type TbIntEvalType specifying eval type.
     * @param max_deriv Max derivative to compute.
     * @param storage Available storage in bytes.
     * @param deriv_ctr Derivative center descriptor. 
     */
    void
    tbint_initialize (
      /* in */ ::Chemistry::QC::GaussianBasis::Molecular bs1,
      /* in */ ::Chemistry::QC::GaussianBasis::Molecular bs2,
      /* in */ ::Chemistry::QC::GaussianBasis::TbIntEvalType type,
      /* in */ int32_t max_deriv,
      /* in */ int64_t storage,
      /* in */ ::Chemistry::QC::GaussianBasis::DerivCenters deriv_ctr
    )
    throw () 
    ;


    /**
     * Get one body int buffer pointer.
     * @return Buffer pointer. 
     */
    void*
    get_obint_buffer() throw () 
    ;

    /**
     * Return number of supported two body int types.
     * @return Number of types. 
     */
    int32_t
    get_tbint_n_types() throw () 
    ;

    /**
     * Get two body int buffer pointers.
     * @param type TbIntType specifying buffer type.
     * @return Buffer pointer. 
     */
    void*
    get_tbint_buffer (
      /* in */ ::Chemistry::QC::GaussianBasis::TbIntType type
    )
    throw () 
    ;


    /**
     * Compute a shell doublet of integrals.  deriv_atom must 
     * be used for nuclear derivatives if the operator contains 
     * nuclear coordinates, otherwise, set to -1 and use deriv_ctr.
     * @param shellnum1 Gaussian shell number 1.
     * @param shellnum2 Gaussian shell number 2.
     * @param deriv_level Derivative level. 
     * @param deriv_atom Atom number for derivative 
     * (-1 if using DerivCenter). 
     */
    void
    compute (
      /* in */ int64_t shellnum1,
      /* in */ int64_t shellnum2,
      /* in */ int32_t deriv_level,
      /* in */ int64_t deriv_atom
    )
    throw () 
    ;


    /**
     * Compute a shell doublet of integrals and return as a borrowed
     * sidl array.  deriv_atom must be used for nuclear derivatives if
     * the operator contains nuclear coordinates, otherwise, set to -1 
     * and use deriv_ctr.
     * @param shellnum1 Gaussian shell number 1.
     * @param shellnum2 Gaussian shell number 2.
     * @param deriv_level Derivative level.
     * @param deriv_atom Atom number for derivative 
     * (-1 if using DerivCenter).
     * @return Borrowed sidl array buffer. 
     */
    ::sidl::array<double>
    compute_array (
      /* in */ int64_t shellnum1,
      /* in */ int64_t shellnum2,
      /* in */ int32_t deriv_level,
      /* in */ int64_t deriv_atom
    )
    throw () 
    ;

  };  // end class IntegralEvaluator2_impl

} // end namespace MPQC

// DO-NOT-DELETE splicer.begin(MPQC.IntegralEvaluator2._misc)
// Put miscellaneous things here...
// DO-NOT-DELETE splicer.end(MPQC.IntegralEvaluator2._misc)

#endif
