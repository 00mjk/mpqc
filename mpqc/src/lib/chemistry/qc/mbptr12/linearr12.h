//
// linearr12.h
//
// Copyright (C) 2003 Edward Valeev
//
// Author: Edward Valeev <edward.valeev@chemistry.gatech.edu>
// Maintainer: EV
//
// This file is part of the SC Toolkit.
//
// The SC Toolkit is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// The SC Toolkit is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Library General Public License for more details.
//
// You should have received a copy of the GNU Library General Public License
// along with the SC Toolkit; see the file COPYING.LIB.  If not, write to
// the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
//
// The U.S. Government is granted a limited license as per AL 91-7.
//

#ifdef __GNUG__
#pragma interface
#endif

#include <string>
#include <chemistry/qc/basis/integral.h>
#include <chemistry/qc/basis/tbint.h>

#ifndef _chemistry_qc_mbptr12_linearr12_h
#define _chemistry_qc_mbptr12_linearr12_h

namespace sc {
  namespace LinearR12 {

    const int NumCorrFactors = 2;
    enum CorrelationFactorID {
        // Linear R12 correlation factor
        R12CorrFactor = 0,
        // exp(-gamma r12^2) correlation factor -- Gaussian geminal
        G12CorrFactor = 1
    };
      
    class CorrelationFactor : public RefCount {
      public:
        typedef Ref<TwoBodyInt> TwoBodyEval;
        typedef TwoBodyEval (Integral::* IntegralCallback)(const Ref<IntParams>&);
        /// Vector of contracted 2 particle functions
        typedef std::vector< std::vector<std::pair<double,double> > > CorrelationParameters;

        /// Initializes correlation factor id with correlation parameters params
        CorrelationFactor(const CorrelationFactorID& id, const CorrelationParameters& params = CorrelationParameters());
        ~CorrelationFactor();

        /// Returns CorrelationFactorID
        const CorrelationFactorID& id() const;
        /// Returns label
        const std::string& label() const;
        /// Returns the number of contracted two-particle functions in the set
        unsigned int nfunctions() const;
        /// Returns the number of primitive functions in contraction c
        unsigned int nprimitives(unsigned int c) const;
        /// Returns std::pair<primitive_parameter,coefficient> in primitive p of contraction c
        const std::pair<double,double>& primitive(unsigned int c, unsigned int p) const;
        /// Returns callback
        const IntegralCallback& callback() const;
        /// Returns number of two-body integral types produced by the object generated by callback
        unsigned int num_tbint_types() const;

        /// Returns (int)TwoBodyInt::tbint_type corresponding to electron repulsion integrals
        int tbint_type_eri() const { return tbint_type_eri_; }
        /// Returns (int)TwoBodyInt::tbint_type corresponding to integrals over correlation operator
        int tbint_type_f12() const { return tbint_type_f12_; }
        /// Returns (int)TwoBodyInt::tbint_type corresponding to integrals over [T1,f12]
        int tbint_type_t1f12() const { return tbint_type_t1f12_; }
        /// Returns (int)TwoBodyInt::tbint_type corresponding to integrals over [T2,f12]
        int tbint_type_t2f12() const { return tbint_type_t2f12_; }
        /// Returns (int)TwoBodyInt::tbint_type corresponding to integrals over f12/r12
        int tbint_type_f12eri() const { return tbint_type_f12eri_; }
        /// Returns (int)TwoBodyInt::tbint_type corresponding to integrals over f12^2
        int tbint_type_f12f12() const { return tbint_type_f12f12_; }
        /// Returns (int)TwoBodyInt::tbint_type corresponding to integrals over [f12,[T1,f12]]
        int tbint_type_f12t1f12() const { return tbint_type_f12t1f12_; }
        
      private:
        void init();
        void init2(const std::string& label,
                   IntegralCallback callback,
                   unsigned int num_tbint_types);
        
        CorrelationFactorID id_;
        CorrelationParameters params_;
        std::string label_;
        IntegralCallback callback_;
        unsigned int num_tbint_types_;

        int tbint_type_eri_;
        int tbint_type_f12_;
        int tbint_type_t1f12_;
        int tbint_type_t2f12_;
        int tbint_type_f12eri_;
        int tbint_type_f12f12_;
        int tbint_type_f12t1f12_;
        /// Set (int)TwoBodyInt::tbint_type corresponding to electron repulsion integrals
        void tbint_type_eri(const TwoBodyInt::tbint_type& t) { tbint_type_eri_ = static_cast<int>(t); }
        /// Set (int)TwoBodyInt::tbint_type corresponding to integrals over correlation operator
        void tbint_type_f12(const TwoBodyInt::tbint_type& t) { tbint_type_f12_ = static_cast<int>(t); }
        /// Set (int)TwoBodyInt::tbint_type corresponding to integrals over [T1,f12]
        void tbint_type_t1f12(const TwoBodyInt::tbint_type& t) { tbint_type_t1f12_ = static_cast<int>(t); }
        /// Set (int)TwoBodyInt::tbint_type corresponding to integrals over [T2,f12]
        void tbint_type_t2f12(const TwoBodyInt::tbint_type& t) { tbint_type_t2f12_ = static_cast<int>(t); }
        /// Set (int)TwoBodyInt::tbint_type corresponding to integrals over f12/r12
        void tbint_type_f12eri(const TwoBodyInt::tbint_type& t) { tbint_type_f12eri_ = static_cast<int>(t); }
        /// Set (int)TwoBodyInt::tbint_type corresponding to integrals over f12^2
        void tbint_type_f12f12(const TwoBodyInt::tbint_type& t) { tbint_type_f12f12_ = static_cast<int>(t); }
        /// Set (int)TwoBodyInt::tbint_type corresponding to integrals over [f12,[T1,f12]]
        void tbint_type_f12t1f12(const TwoBodyInt::tbint_type& t) { tbint_type_f12t1f12_ = static_cast<int>(t); }
        
    };
      
    enum StandardApproximation {StdApprox_A = 0,
				StdApprox_Ap = 1,
				StdApprox_B = 2};
    enum ABSMethod {ABS_ABS = 0,
		    ABS_ABSPlus = 1,
		    ABS_CABS = 2,
		    ABS_CABSPlus = 3};
  }

}

#endif

// Local Variables:
// mode: c++
// c-file-style: "CLJ"
// End:


