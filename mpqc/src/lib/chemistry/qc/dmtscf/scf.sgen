
default_modules(assign iseq print alloc free zero
                init bcast0 rbcast0 sbcast0 recv0 send0 );

scf_struct {
  boolean hsos;           // 1 if high-spin open-shell
  boolean singlet;        // 1 if open-shell singlet
  boolean special;        // 1 if OPENTYPE=special
  boolean twocon;         // 1 if tcscf
  boolean uhf;            // 1 if UHF wavefunction
  boolean use_symmetry;   // 1 if symmetry is to be used
  boolean restart;        // 1 if old scf vector to be used
  boolean warmrestart;    // 1 if there is a checkpoint vector to
                          //                  be used for restart
  boolean proj_vector;    // if true, form guess vector from old basis set
  boolean diis_flg;       // 1 if diis is to be used
  boolean ckpt_del;       // 1 if checkpoint files are deleted
  boolean local_p;        // 1 if local density matrices used
  boolean eliminate;      // if true, then use pmax
  boolean exchange;       // if true, print the exchange energy contribution
  boolean load_bal;       // if true, use better load balancing gmat algor.
  boolean scdft;          // if true, use self-consit. dft method
  boolean dft;            // if true, use post-hf dft
  boolean debug;
  boolean debug_node;

  string ckptdir;     // ckptdir: directory for checkpoint files
  string fname;      //    fname: files written as "fname".{scfvec,fock,etc...}

  int ckpt_freq;      //   ckpt_freq: checkpoint every ckpt_freq iterations
  int convergence;    // convergence: convergence on density matrix
  int maxiter;        //     maxiter: maximum number of iterations in scf
  int intcut;         //      intcut: cutoff for not calculating int batch
  int int_store;      //   int_store: the number of integrals to keep in core
  int p_reset_freq;   // p_reset_freq: redo full fock matrix this often
  int ndiis;          //       ndiis: number of error matrices to use with diis
  int it_diis;        //     it_diis: iteration to begin diis extrapolation
  int fock_typ;       //    fock_typ: used to select form of fock_eff 
                      //              for open-shell scf
  int print_flg;

  double diisdamp;    //    diisdamp: scale factor for diag. elements of bmat
  double lvl_shift;   //   lvl_shift: level shift


  boolean iopen;          //       iopen: 1 if open-shell or tcscf
  boolean converged;      //   converged: 1 if wavefunction is converged

  int nbfao;          //       nbfao: number of basis functions in ao basis
  int nbfso;          //       nbfso: number of basis functions in so basis
  int nbstri;         //      nbstri: size of lower triangle in so basis
  int nbatri;         //      nbatri: size of lower triangle in ao basis
  int nsomax;         //      nsomax: max. # of so's per irrep
  int mxcoef;         //      mxcoef: sum of (# so's per irrep)**2
  int mxcoef2;        //     mxcoef2: sum of ioff[# so's per irrep]
  int nclosed;        //     nclosed: number of doubly occupied MOs
  int nopen;          //       nopen: number of singly occupied MOs

  double nuc_rep;     //     nuc_rep: nuclear repulsion energy
  double e_elec;      //      e_elec: electronic energy
  double diis_er;     //     diis_er: maximum element of diis error matrix
  double e_exc;       //       e_exc: exchange energy

  double alpha;
  double beta;

  int ncharge;                     // the number of point charges to use
  int nxyz;                        // 3 (for an sgen limitation)
  double charge[ncharge];          // the charges
  double chargex[ncharge][nxyz];   // the positions of the charges
  } ;

exmul {
  double charge;
  double r[3];
  };

expts {
  int n;
  exmul p[n];
  };
