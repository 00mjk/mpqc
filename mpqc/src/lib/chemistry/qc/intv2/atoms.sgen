
default_modules(free alloc bread bwrite print init bcast0 rbcast0
                sbcast0 fread fwrite assign iseq zero send0 recv0);

shell_type (!print) {
  int am;
  int puream;
};

// shell describes a shell of basis functions
//   nprim is the number of primitives
//   ncon is the number of sets contraction coefficients
//   nfunc is the number of basis functions in this shell
//   exp is a vector of exponents
//   shell_type gives the precise type of the shell
//   coef is a vector of contraction coefficients
//   pcoef is the p contraction coef of an sp pair
//   norm is a vector of normalization constants for each function in the shell
//     norm must be allocated and freed explicitly by the user
shell (!bread !bwrite !print !rbcast0 !sbcast0 !fread !fwrite !assign
       !zero !send0 !recv0) {
  int nprim;
  int ncon;
  int nfunc;
  double exp[nprim];
  shell_type type[ncon];
  double coef[ncon][nprim];
  double **norm;
};

// basis is a set of basis functions
//   n is the number of basis functions
//   name is the name of the basis set
//   shell is an array of shells
basis {
  int n;
  string name;
  shell shell[n];
};

// center descibes a single atom and its basis functions
//   atom is the name of the atom
//   charge is the charge of the atom
//   r gives the x, y, and z coordinates of the atom
//   basis gives the basis functions on the atom
center {
  string atom;
  double charge;
  double r[3];
  basis basis;
};

// centers describes the atoms and their basis functions
//   n is the number of centers
//   center is an array of structures describing each atoms and bf's.
//   shell_offset is the offset for the shells on these centers
//   prim_offset is the offset for the primitives on these centers
//   func_offset is the offset for the basis functions on these centers
//   nshell is the number of shells on these centers
//   nprim is the number of primitives on these centers
//   nfunc is the number of basis functions on these centers
//   nbf is the number of ao basis functions on these centers
//   center_num maps the overall shell number to the center number
//   shell_num maps the overall shell number to the shell num on its center
//   func_num maps the overall shell number to the first basis function in the
//     shell
centers {
  int n;
  center center[n];
  int shell_offset;
  int prim_offset;
  int func_offset;
  int nshell;
  int nprim;
  int nfunc;
  int center_num[nshell];
  int shell_num[nshell];
  int func_num[nshell];
};

